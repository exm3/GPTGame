// Set up the canvas
const canvas = document.createElement("canvas");
const context = canvas.getContext("2d");
canvas.width = 800;
canvas.height = 600;
document.body.appendChild(canvas);

document.title = "Polygon Game";

// Load sound effects and music
const collisionSound = new Audio("collision.wav");
const powerupSound = new Audio("powerup.wav");
const gameOverSound = new Audio("game_over.wav");
const backgroundMusic = new Audio("background_music.mp3");

// Play background music
backgroundMusic.loop = true;
backgroundMusic.play();

// Define player attributes
let playerX = 400;
let playerY = 300;
const playerSize = 50;
const playerSpeed = 5;

// Define enemy attributes
const numEnemies = 3;
let enemies = [];

for (let i = 0; i < numEnemies; i++) {
  enemies.push({
    x: Math.floor(Math.random() * 800),
    y: Math.floor(Math.random() * 600),
    size: 50,
    speed: 2
  });
}

// Define power-up attributes
let powerupX = Math.floor(Math.random() * 800);
let powerupY = Math.floor(Math.random() * 600);
const powerupSize = 30;

// Define game states
const STATE_PLAYING = 0;
const STATE_GAME_OVER = 1;
let gameState = STATE_PLAYING;

// Define score
let score = 0;

// Game loop
function gameLoop() {
  // Handle events
  document.addEventListener("keydown", handleKeyDown);

  // Move the player
  function handleKeyDown(event) {
    if (gameState === STATE_PLAYING) {
      switch (event.key) {
        case "ArrowLeft":
          playerX -= playerSpeed;
          break;
        case "ArrowRight":
          playerX += playerSpeed;
          break;
        case "ArrowUp":
          playerY -= playerSpeed;
          break;
        case "ArrowDown":
          playerY += playerSpeed;
          break;
      }
    } else if (gameState === STATE_GAME_OVER && event.key === "Enter") {
      resetGame();
    }
  }

  // Clear the screen
  context.fillStyle = "#000000";
  context.fillRect(0, 0, canvas.width, canvas.height);

  // Draw the player
  context.fillStyle = "#ff0000";
  context.beginPath();
  context.arc(playerX, playerY, playerSize, 0, Math.PI * 2);
  context.closePath();
  context.fill();

  // Draw the enemies
  context.fillStyle = "#00ff00";
  for (let i = 0; i < enemies.length; i++) {
    const enemy = enemies[i];
    context.beginPath();
    context.arc(enemy.x, enemy.y, enemy.size, 0, Math.PI * 2);
    context.closePath();
    context.fill();

    // Update enemy positions towards the player
    const dx = playerX - enemy.x;
    const dy = playerY - enemy.y;
    const distance = Math.sqrt(dx ** 2 + dy ** 2);
    const enemySpeed = enemy.speed;
    const enemyDirectionX = dx / distance;
    const enemyDirectionY = dy / distance;
    enemy.x += enemyDirectionX * enemySpeed;
    enemy.y += enemyDirectionY * enemySpeed;

    // Check collision with each enemy
    if (distance < playerSize + enemy.size) {
      gameState = STATE_GAME_OVER;
      gameOverSound.play();
